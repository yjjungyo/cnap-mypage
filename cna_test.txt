



fureunsan@hotmail.com




컨테이너 오케스트레이션 (Azure)

az account set --subscription "종량제2"



Azure Resource Group 생성 - Azure Portal

Azure 클러스터 생성
az aks create --resource-group myrsrc01 --name mycls01 --node-count 2 --enable-addons monitoring --generate-ssh-keys

Azure 클러스터 토큰 가져오기
az aks get-credentials --resource-group myrsrc01 --name mycls01

Azure 컨테이너 레지스트리 생성
az acr create --resource-group myrsrc01 --name fuacr01 --sku Basic
  
  하고나면,   fuacr01.azurecr.io 에 접속가능함

Azure 컨테이너 레지스트리 로그인
az acr login --name fuacr01

Azure 클러스터(AKS)에 레지스트리(ACR) 붙이기
az aks update -n mycls01 -g myrsrc01 --attach-acr fuacr01

		fureunsan@Azure:~$  kubectl get all
		NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
		service/kubernetes   ClusterIP   10.0.0.1     <none>        443/TCP   29m


========================================================================================================================
kafka 카프카
========================================================================================================================


헬름 버전이 3.xx 일때 카프카 설치 방법
fureunsan@Azure:~$ kubectl --namespace kube-system create sa tiller
serviceaccount/tiller created

fureunsan@Azure:~$ kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller

fureunsan@Azure:~$ helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator

fureunsan@Azure:~$ helm repo update

fureunsan@Azure:~$ kubectl create ns kafka

fureunsan@Azure:~$ helm install my-kafka --namespace kafka incubator/kafka

fureunsan@Azure:~$ kubectl get all -n kafka
					NAME                                             READY   STATUS              RESTARTS   AGE
					pod/my-kafka-0                                   1/1     Running             1          2m34s
					pod/my-kafka-1                                   0/1     ContainerCreating   0          16s
					pod/my-kafka-test-topic-create-consume-produce   0/1     Error               0          2m34s
					pod/my-kafka-zookeeper-0                         1/1     Running             0          2m34s
					pod/my-kafka-zookeeper-1                         1/1     Running             0          105s
					pod/my-kafka-zookeeper-2                         1/1     Running             0          58s

					NAME                                  TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                      AGE
					service/my-kafka                      ClusterIP   10.0.184.50   <none>        9092/TCP                     2m35s
					service/my-kafka-headless             ClusterIP   None          <none>        9092/TCP                     2m35s
					service/my-kafka-zookeeper            ClusterIP   10.0.7.4      <none>        2181/TCP                     2m35s
					service/my-kafka-zookeeper-headless   ClusterIP   None          <none>        2181/TCP,3888/TCP,2888/TCP   2m35s

					NAME                                  READY   AGE
					statefulset.apps/my-kafka             1/3     2m36s
					statefulset.apps/my-kafka-zookeeper   3/3     2m36s


클러스터 환경에서 토픽을 생성 하여 해당 토픽에서 메세지를 pub/sub 해보기

	kubectl get po -n kafka 명령으로 주키퍼 3개와 kafka 3개가 정상적으로 올라가 있어야 합니다.

fureunsan@Azure:~$ kubectl exec -it declarative-pod -- /bin/bash

토픽 생성

토픽 생성과 관리는 zookeeper 가 관리를 합니다. zookeeper는 실행시 기본 2181 포트로 구동됩니다.
eventTopic 이라는 토픽을 생성 합니다. <-----------success 

fureunsan@Azure:~$ kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic eventTopic --create --partitions 1 --replication-factor 1



이벤트 발행하기

eventTopic 이라는 토픽에 메세지를 발행합니다.
fureunsan@Azure:~$ kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-producer --broker-list my-kafka:9092 --topic eventTopic




생성된 토픽을 확인하여 봅니다.

eventTopic 이라는 토픽이 보여야 합니다.  <--- OK
fureunsan@Azure:~$ kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --list

이벤트 수신하기

새로운 shell 을 열니다.
eventTopic 이라는 토픽에 발행된 메세지를 수신합니다.
fureunsan@Azure:~$ kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-consumer --bootstrap-server my-kafka:9092 --topic eventTopic --from-beginning


kafka topic delete 

fureunsan@Azure:~$ kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --delete --zookeeper my-kafka-zookeeper:2181 --topic eventTopic
Topic eventTopic is marked for deletion.
Note: This will have no impact if delete.topic.enable is not set to true.


========================================================================================================================
ISTIO
========================================================================================================================
Istio 설치

fureunsan@Azure:~$ curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.1 TARGET_ARCH=x86_64 sh -
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   102  100   102    0     0     98      0  0:00:01  0:00:01 --:--:--    98
100  4277  100  4277    0     0   2915      0  0:00:01  0:00:01 --:--:-- 4176k

Downloading istio-1.7.1 from https://github.com/istio/istio/releases/download/1.7.1/istio-1.7.1-linux-amd64.tar.gz ...

Istio 1.7.1 Download Complete!

Istio has been successfully downloaded into the istio-1.7.1 folder on your system.

Next Steps:
See https://istio.io/latest/docs/setup/install/ to add Istio to your Kubernetes cluster.

To configure the istioctl client tool for your workstation,
add the /home/fureunsan/istio-1.7.1/bin directory to your environment path variable with:
         export PATH="$PATH:/home/fureunsan/istio-1.7.1/bin"

Begin the Istio pre-installation check by running:
         istioctl x precheck

Need more information? Visit https://istio.io/latest/docs/setup/install/